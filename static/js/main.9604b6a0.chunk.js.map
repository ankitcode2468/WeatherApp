{"version":3,"sources":["logo.svg","img/bg.jpg","services/api.js","components/Information.jsx","components/Form.jsx","components/Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["getWeather","city","country","a","axios","get","data","useStyles","makeStyles","component","margin","container","display","row","padding","fontSize","letterSpacing","value","color","icon","marginRight","error","background","Information","classes","Box","className","Typography","name","sys","main","temp","humidity","Date","sunrise","toLocaleTimeString","sunset","weather","clouds","all","input","labelRoot","button","width","height","marginTop","Form","useState","setCity","setCountry","click","handleClick","setData","useEffect","then","response","weatherInfo","console","log","TextField","InputProps","onChange","e","handleCityChange","target","label","InputLabelProps","root","handleCountryChange","Button","variant","onClick","alignItems","leftContainer","backgroundImage","Image","backgroundSize","borderRadius","rightContainer","top","head","Weather","class1","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9604b6a0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/bg.9c811a51.jpg\";","import axios from 'axios';\n\nconst API_KEY = '8d2a110b6ad468ae1a0e459757cf659d';\nconst URL = 'http://api.openweathermap.org/data/2.5/weather';\n\n\nexport const getWeather = async(city, country) => {\n    const data = await axios.get(`${URL}?q=${city},${country}&appid=${API_KEY}&units=metric`)\n    return data;\n}","import { Box, makeStyles, Typography } from '@material-ui/core';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport SettingsBrightnessIcon from '@material-ui/icons/SettingsBrightness';\nimport OpacityIcon from '@material-ui/icons/Opacity';\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\nimport Brightness6Icon from '@material-ui/icons/Brightness6';\nimport DehazeIcon from '@material-ui/icons/Dehaze';\nimport CloudIcon from '@material-ui/icons/Cloud';\n\nconst useStyles = makeStyles({\n    component: {\n        margin: '30px 60px'\n    },\n    container: {\n        display: 'flex',\n    },\n    row: {\n        padding: 10,\n        fontSize: 20,\n        letterSpacing: 2,\n    },\n    value: {\n        color: '#fff'\n    },\n    icon: {\n        color: 'darkred',\n        marginRight: 15\n    },\n    error: {\n        background: 'red',\n        color: '#fff',\n        margin: 50,\n        padding: 20\n    }\n})\n//typography give p tag by default\nconst Information = ({ data, city, country }) => {\n    const classes = useStyles();\n\n    const getCloudsData = (value) => {\n        if(value === 0){\n            return 'Clear';\n        }else if(value > 1 && value < 100){\n            return 'Partially Cloudy';\n        }else{\n            return 'Cloudy';\n        }\n    }\n\n    return (\n        data && city && country ?\n            <Box className={classes.component}>\n                <Typography className={classes.row}><LocationOnIcon className={classes.icon}/>Location:  <Box className={classes.value} component=\"span\">{data.name}, {data.sys.country} </Box></Typography>\n                <Typography className={classes.row}><SettingsBrightnessIcon className={classes.icon} />Temperature:  <Box className={classes.value} component=\"span\">{data.main.temp}Â°C </Box></Typography>\n                <Typography className={classes.row}><OpacityIcon className={classes.icon} />Humidity:  <Box className={classes.value} component=\"span\">{data.main.humidity}% </Box></Typography>\n                <Typography className={classes.row}><Brightness5Icon className={classes.icon} />Sun Rise:  <Box className={classes.value} component=\"span\">{new Date(data.sys.sunrise * 1000).toLocaleTimeString()} </Box></Typography>\n                <Typography className={classes.row}><Brightness6Icon className={classes.icon} />Sun Set: <Box className={classes.value} component=\"span\">{new Date(data.sys.sunset * 1000).toLocaleTimeString()} </Box></Typography> \n                <Typography className={classes.row}><DehazeIcon className={classes.icon} />Condition:  <Box className={classes.value} component=\"span\">{data.weather[0].main} </Box></Typography>\n                <Typography className={classes.row}><CloudIcon className={classes.icon} />Clouds:  <Box className={classes.value} component=\"span\">{getCloudsData(data.clouds.all)} </Box></Typography>\n            </Box>\n        : !(city && country) ? <Typography className={classes.error}>Please Enter the values to check Weather</Typography> : ''\n    )\n}\n\nexport default Information;","import { useState, useEffect } from 'react';\nimport { Box, TextField, Button, makeStyles } from '@material-ui/core';\nimport { getWeather } from '../services/api';\nimport Information from './Information';\n//makestye take object as \n// label means placeholder\nconst useStyles = makeStyles({\n    component: {\n        padding: 10,\n        display: 'flex',\n        background: '#445A6F'\n    },\n    input: {\n        color: '#fff',\n        marginRight: 15\n    },\n    labelRoot: {\n        fontSize: 15,\n        color: '#fff'\n    },\n    button: {\n        background: '#e67e22',\n        color: '#fff',\n        width: 150,\n        height: 40,\n        marginTop: 5\n    }\n})\n\nconst Form = () => {\n    const classes = useStyles();\n    const [ city, setCity ] = useState('');\n    const [ country, setCountry ] = useState('');\n    const [ click, handleClick ] = useState(false);\n    const [ data, setData ] = useState();\n\n    useEffect(() => {\n        const weatherInfo = async () => {\n            city && await getWeather(city, country).then(response => {\n                setData(response.data);\n            })\n        }\n        weatherInfo();\n        console.log(city, country);\n        console.log(data);\n        handleClick(false);\n    }, [click]);\n\n    const handleCityChange = (city) => {\n        setCity(city);\n    }\n\n    const handleCountryChange = (country) => {\n        setCountry(country);\n    }\n\n    return (\n        <>\n            <Box className={classes.component}>\n                <TextField \n                    InputProps={{className: classes.input}} \n                    onChange={(e) => handleCityChange(e.target.value)} \n                    className={classes.input} \n                    label=\"City\" \n                    InputLabelProps={{\n                        classes: {root: classes.labelRoot}\n                    }}\n                />\n                <TextField \n                    InputProps={{className: classes.input}} \n                    onChange={(e) => handleCountryChange(e.target.value)} \n                    className={classes.input} \n                    label=\"Country\" \n                    InputLabelProps={{\n                        classes: {root: classes.labelRoot}\n                    }}\n                />\n                <Button \n                    variant=\"contained\" \n                    onClick={() => handleClick(true)}\n                    className={classes.button}\n                >Get Weather</Button>\n            </Box>\n            <Information data={data} city={city} country={country} />\n        </>\n    )\n}\n\nexport default Form;","import { makeStyles, Box, Typography } from '@material-ui/core';\nimport Image from '../img/bg.jpg';\nimport Form from './Form';\n\nconst useStyles = makeStyles({\n    component: {\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        width: '65%',\n        margin: '0 auto'\n    },\n    leftContainer: {\n        width: '27%',\n        height: '80%',\n        backgroundImage: `url(${Image})`,\n        backgroundSize: 'cover',\n        borderRadius: '20px 0 0 20px'\n    },\n    rightContainer: {\n        width: '73%',\n        height: '80%',\n        background: 'linear-gradient(to right, #e74c3c, #e67e22)',\n    },\n    \n})\nconst top= makeStyles({\n    component: {\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        width: '65%',\n        margin: '0 auto'\n    },\n    head:{\n        margin:\"0% 25% 0% 20%\",\n        padding:\"0% 0% 0% 20%\",\n        width: '40%',\n        height: '5%',\n        background: 'linear-gradient(to right, #e74c3c, #e67e22)',\n    }\n})\n\nconst Weather = () => {\n    const classes = useStyles();\n    const class1=top();\n    return (\n        <Box > \n            <Box className={class1.component} className={class1.head}  ><h1>WEATHER-APP</h1></Box>\n        <Box className={classes.component}>\n            <Box className={classes.leftContainer}></Box>\n            <Box className={classes.rightContainer}>\n                <Form />\n            </Box>\n        </Box>\n        </Box>\n    )\n}\n\nexport default Weather;","import logo from './logo.svg';\nimport './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <Weather />\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}